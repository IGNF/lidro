# @package _global_

# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}

io:
  input_filename: null
  input_mask_hydro: null
  input_bridge: null
  input_skeleton: null
  input_dir: null
  input_dir_point_virtual: null
  output_dir: null
  dir_points_skeleton: null # folder to contains files (.GeoJSON) by LIDAR tiles : neighboring points for each point of the skeleton
  srid: 2154
  extension: .tif
  raster_driver: GTiff
  pixel_size: 1
  no_data_value: -9999
  tile_size: 1000

  skeleton:
    mask_input_path: null
    skeleton_lines_output_path: null # only branches' skeleton (if empty, no file is created)
    gap_lines_output_path: null # only new lines to close gaps (if empty, no file is created)
    global_lines_output_path: null # lines from both the skeletons and the gap lines

mask_generation:
  raster:
    # Size for dilatation
    dilation_size: 3
  filter:
    # Classes to be considered as "non-water"
    keep_classes: [0, 1, 2, 3, 4, 5, 6, 17, 64, 65, 66, 67, 69] # All classes
  vector:
    # Filter water's area (mÂ²)
    min_water_area: 150
    # Parameters for buffer
    buffer_positive: 1
    buffer_negative: -1.5 # negative buffer should be bigger than positive buffer to prevent protruding over the banks
    # Tolerance from Douglas-Peucker
    tolerance: 1

skeleton:
  max_gap_width: 200 # distance max in meter of any gap between 2 branches we will try to close with a line
  max_bridges: 1 # number max of bridges that can be created between 2 branches
  gap_width_check_db: 20 # for a gap at least this wide, we check with db_uni if there is a bridge. Smaller than that, we assume a line automatically exists
  ratio_gap: 0.25 # when checking if a candidate line to close a gap intersects a bridge in BD UNI, that's the ratio ]0.1] of the line to consider.
                  # we only check part of the line, because when the line is really long it can intersect with bridges not corresponding to that line,
                  # so we make the line smaller
  clipping_length: 1 #  length removed from extremities (min length of a line : 1m)

  db_uni:
    db_using_db: True # if false, the DB won't be queried (expected to be used only in case you don't have access to the database)
    db_name: bduni_france_consultation
    db_host: bduni_consult.ign.fr
    db_user: null
    db_password: null
    db_port: 5432

  branch:
    voronoi_max_length: 2 # max size of a voronoi line
    water_min_size: 500 # min size of a skeleton line to be sure not to be removed (should be at least more than half the max river width)
    max_gap_candidates: 3 # max number of candidates to close a gap between 2 branches

virtual_point:
  filter:
    # Keep ground and water pointclouds between Hydro Mask and Hydro Mask buffer
    keep_neighbors_classes: [2, 69]
  vector:
    # Distance in meters between 2 consecutive points from Skeleton Hydro
    distance_meters: 5
    # Buffer for searching the points classification (default. "3") of the input LAS/LAZ file
    buffer: 3
    # The number of nearest neighbors to find with KNeighbors
    k: 3
    # The minimum length of a river to use the linear regression model
    river_length: 150 
  pointcloud:
    # Spacing between the grid points in meters by default "0.5"
    points_grid_spacing: 0.5
    # The number of the classe assign those virtual points
    virtual_points_classes : 68




hydra:
  output_subdir: null
  run:
    dir: .